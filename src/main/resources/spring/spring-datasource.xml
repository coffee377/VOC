<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- Spring自带的数据源 DriverManagerDataSource -->
    <!--<bean id="springDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
    <!--<property name="driverClassName" value="${jdbc.driverClass}"/>-->
    <!--<property name="url" value="${jdbc.url}"/>-->
    <!--<property name="username" value="${jdbc.username}"/>-->
    <!--<property name="password" value="${jdbc.password}"/>-->
    <!--</bean>-->


    <!-- dbcp 数据连接池 -->
    <!--<bean id="dbcpDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">-->
    <!--<property name="driverClassName" value="${jdbc.driverClass}"/>-->
    <!--<property name="url" value="${jdbc.url}"/>-->
    <!--<property name="username" value="${jdbc.username}"/>-->
    <!--<property name="password" value="${jdbc.password}"/>-->
    <!--</bean>-->

    <!-- c3p0 数据连接池 -->
    <!--<bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">-->
    <!--<property name="driverClass" value="${jdbc.driverClass}"/>-->
    <!--<property name="jdbcUrl" value="${jdbc.url}"/>-->
    <!--<property name="user" value="${jdbc.username}"/>-->
    <!--<property name="password" value="${jdbc.password}"/>-->
    <!--</bean>-->

    <!-- druid 数据连接池 -->
    <bean id="druidDataSource" name="druid" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 数据基本配置 -->
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 初始化连接池数量 type:int -->
        <property name="initialSize" value="${druid.initialSize}"/>

        <!-- 最小连接池数量 type:int -->
        <property name="minIdle" value="${druid.minIdle}"/>

        <!-- 最大连接池数量 type:int -->
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间,单位：毫秒 type:long -->
        <!-- 配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <!-- 使用非公平锁 type:boolean -->
        <property name="useUnfairLock" value="${druid.useUnfairLock}"/>

        <!-- 对于建立连接过长的连接强制关闭，超过时间限制是否回收 type:boolean -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>

        <!-- 上述回收超时时间 单位：秒 type:long -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

        <!-- 用来检测连接是否有效的sql，要求是一个查询语句 type:sql -->
        <property name="validationQuery" value="${druid.validationQuery}"/>

        <!-- 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 type:boolean -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>

        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>

        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}"/>

        <!-- 开启PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>

        <!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： -->
        <!-- 监控统计用的filter:stat -->
        <!-- 日志用的filter:log4j -->
        <!-- 防御SQL注入的filter:wall -->
        <property name="filters" value="${druid.filters}"/>
    </bean>
</beans>